/*
 * Copyright (C) 2013 The Mango Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * The code of this project is a port of (or wrapper around) the Guava-libraries.
 *    See http://code.google.com/p/guava-libraries/
 *
 * @author Markus Schneider
 */
package org.feijoas.mango.common.collect

import com.google.common.collect as cgcc
import org.feijoas.mango.common.annotations.Beta
import org.feijoas.mango.common.base.Preconditions.checkNotNull
import org.feijoas.mango.common.convert.{AsJava, AsScala}

import scala.jdk.CollectionConverters.{IterableHasAsJava, IterableHasAsScala}

/**
 * Views elements of a type {@code T} as nodes in a tree, and provides methods to traverse the trees
 * induced by this traverser.
 *
 * <p>For example, the tree
 *
 * <pre>          {@code
 *          h
 *        / | \
 *       /  e  \
 *      d       g
 *     /|\      |
 *    / | \     f
 *   a  b  c       }</pre>
 *
 * <p>can be iterated over in preorder (hdabcegf), postorder (abcdefgh), or breadth-first order
 * (hdegabcf).
 *
 * <p>Null nodes are strictly forbidden.
 *
 *  @author Markus Schneider
 *  @since 0.11 (copied from guava-libraries)
 */
@Beta
trait TreeTraverser[T] {

  /**
   * Returns the children of the specified node.  Must not contain null.
   */
  def children: T => Iterable[T]

  /**
   * Returns an unmodifiable iterable over the nodes in a tree structure, using pre-order
   * traversal. That is, each node's subtrees are traversed after the node itself is returned.
   *
   * <p>No guarantees are made about the behavior of the traversal when nodes change while
   * iteration is in progress or when the iterators generated by `#children` are advanced.
   */
  final def preOrderTraversal(root: T): Iterable[T] = this.asJava.preOrderTraversal(root).asScala

  /**
   * Returns an unmodifiable iterable over the nodes in a tree structure, using post-order
   * traversal. That is, each node's subtrees are traversed before the node itself is returned.
   *
   * <p>No guarantees are made about the behavior of the traversal when nodes change while
   * iteration is in progress or when the iterators generated by `#children` are advanced.
   */
  final def postOrderTraversal(root: T): Iterable[T] = this.asJava.postOrderTraversal(root).asScala

  /**
   * Returns an unmodifiable iterable over the nodes in a tree structure, using breadth-first
   * traversal. That is, all the nodes of depth 0 are returned, then depth 1, then 2, and so on.
   *
   * <p>No guarantees are made about the behavior of the traversal when nodes change while
   * iteration is in progress or when the iterators generated by `#children` are advanced.
   */
  final def breadthFirstTraversal(root: T): Iterable[T] = this.asJava.breadthFirstTraversal(root).asScala
}

/** Factory for [[TreeTraverser]] instances. */
object TreeTraverser {

  /**
   * Creates a new `TreeTraverser` using a function that returns the children of the specified node `T`
   */
  final def apply[T](childs: T => Iterable[T]): TreeTraverser[T] = new TreeTraverser[T] {
    checkNotNull(childs)
    final override def children: T => Iterable[T] = childs
  }

  /**
   * Adds an `asJava` method that wraps a Scala `TreeTraverser` in
   *  a Guava `TreeTraverser`.
   *
   *  The returned Guava `TreeTraverser` forwards all calls
   *  to the given Scala `TreeTraverser`.
   *
   *  @param fnc the Scala `TreeTraverser` to wrap in a Guava `TreeTraverser`
   *  @return An object with an `asJava` method that returns a Guava `TreeTraverser`
   *   view of the argument
   */
  implicit final def asGuavaTreeTraverserConverter[T](traverser: TreeTraverser[T]): AsJava[cgcc.TreeTraverser[T]] = {
    def convert(traverser: TreeTraverser[T]): cgcc.TreeTraverser[T] = traverser match {
      case t: AsMangoTreeTraverser[T] => t.delegate
      case _                          => AsGuavaTreeTraverser(traverser)
    }
    new AsJava(convert(traverser))
  }

  /**
   * Adds an `asScala` method that wraps a Guava `TreeTraverser` in
   *  a Scala `TreeTraverser`.
   *
   *  The returned Scala `TreeTraverser` forwards all calls
   *  to the given Guava `TreeTraverser``.
   *
   *  @param pred the Guava `TreeTraverser` to wrap in a Scala `TreeTraverser`
   *  @return An object with an `asScala` method that returns a Scala `TreeTraverser`
   *   view of the argument
   */
  implicit final def asMangoTreeTraverserConverter[T](traverser: cgcc.TreeTraverser[T]): AsScala[TreeTraverser[T]] = {
    def convert(traverser: cgcc.TreeTraverser[T]) = traverser match {
      case AsGuavaTreeTraverser(delegate) => delegate
      case _                              => AsMangoTreeTraverser(traverser)
    }
    new AsScala(convert(traverser))
  }

}

/**
 * Wraps a Scala `TreeTraverser` in a Guava `TreeTraverser`
 */
@SerialVersionUID(1L)
private[mango] case class AsGuavaTreeTraverser[T](delegate: TreeTraverser[T])
    extends cgcc.TreeTraverser[T]
    with Serializable {
  checkNotNull(delegate)
  final override def children(root: T) = delegate.children(root).asJava
}

/**
 * Wraps a Guava `TreeTraverser` in a Scala `TreeTraverser`
 */
@SerialVersionUID(1L)
private[mango] case class AsMangoTreeTraverser[T](delegate: cgcc.TreeTraverser[T])
    extends TreeTraverser[T]
    with Serializable {
  checkNotNull(delegate)
  final override def children: T => Iterable[T] = { root: T => delegate.children(root).asScala }
}
